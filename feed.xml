<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>GetInstance(me)</title>
    <link href="/feed.xml" rel="self" />
    <link href="" />
    <updated>2021-02-06T22:11:15+01:00</updated>
    <author>
        <name>Roman</name>
    </author>
    <id></id>

    <entry>
        <title>How to do good Pull Request?</title>
        <author>
            <name>Roman</name>
        </author>
        <link href="/how-to-do-good-pull-request/"/>
        <id>/how-to-do-good-pull-request/</id>

        <updated>2020-02-13T21:53:49+01:00</updated>
            <summary></summary>
        <content></content>
    </entry>
    <entry>
        <title>Custom exceptions best prectices</title>
        <author>
            <name>Roman</name>
        </author>
        <link href="/custom-exceptions-best-prectices/"/>
        <id>/custom-exceptions-best-prectices/</id>

        <updated>2019-11-15T19:34:49+01:00</updated>
            <summary></summary>
        <content></content>
    </entry>
    <entry>
        <title>Stack vs Heap explained</title>
        <author>
            <name>Roman</name>
        </author>
        <link href="/stack-vs-heap-explained/"/>
        <id>/stack-vs-heap-explained/</id>

        <updated>2019-11-15T19:07:39+01:00</updated>
            <summary></summary>
        <content></content>
    </entry>
    <entry>
        <title>Common pitfalls when using c# async</title>
        <author>
            <name>Roman</name>
        </author>
        <link href="/common-pitfalls-when-using-c-async/"/>
        <id>/common-pitfalls-when-using-c-async/</id>

        <updated>2019-11-16T20:40:03+01:00</updated>
            <summary>
                <![CDATA[
                    Never use Task.Wait() or Task.Result() Always use await If synchronous, .GetAwater().GetResult() it is still blocking operation, but it will return your exception Avoid "return await"
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="mcetoc_1dpo5iikp0">Never use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.wait?view=netframework-4.8" target="_blank" rel="noopener noreferrer">Task.Wait()</a> or Task.Result()</h2>
<p> </p>
<p>Always use <strong>await</strong> </p>
<p>If synchronous, <strong>.GetAwater().GetResult()</strong> it is still blocking operation, but it will return your exception</p>
<ul>
<li>Never use async void</li>
<li>Async cost you 100</li>
<li>ConfigureAwate(false)</li>
</ul>
<p> </p>
<p>Avoid "return await"</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Automatically stepping through code</title>
        <author>
            <name>Roman</name>
        </author>
        <link href="/automatically-stepping-through-code/"/>
        <id>/automatically-stepping-through-code/</id>

        <updated>2019-09-05T21:40:25+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="/media/posts/1/backlit-curve-dark-724712.jpg" alt="DebuggerStepThrough" />
                    There are times when it is prefered to skip method from debugger. For such cases can be used System.Diagnostics.DebuggerStepThrough attribute [DebuggerStepThrough]. Visual Studio debugger will skip break points in method marked with [DebuggerStepThrough] even if F11 is pressed. [DebuggerStepThrough] can also be used to mark class as&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="/media/posts/1/backlit-curve-dark-724712.jpg" alt="DebuggerStepThrough" />
                <p>There are times when it is prefered to skip method from debugger. For such cases can be used <a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debuggerstepthroughattribute?redirectedfrom=MSDN&amp;view=netframework-4.8" target="_blank" rel="noopener noreferrer">System.Diagnostics.DebuggerStepThrough</a> attribute [DebuggerStepThrough]. Visual Studio debugger will skip break points in method marked with [DebuggerStepThrough] even if F11 is pressed. </p>
<p class="p1">[DebuggerStepThrough] can also be used to mark class as well. In that case all methods in class will be skipped from debugger.</p>
<p>. </p>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
